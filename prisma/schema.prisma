// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id                Int @id @default(autoincrement())
  nombre            String @db.VarChar(50) 
  telefono          String @db.VarChar(8)
  email             String @db.VarChar(60)
  password          String @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  //roles
  rolId             Int
  rol               Rol @relation(fields: [rolId], references: [id],onDelete: Cascade,onUpdate: Cascade)
  //inicio sesion
  inicioSesion      InicioSesion[]
  cerrarSesion      CerrarSesion[]  
  //reservas
  reserva           ReservaLibros[]
}

//reserva de libros
model ReservaLibros{
  id                Int @id @default(autoincrement())
  estado            Boolean @default(false)
  fecha_reserva     DateTime @db.Date
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  //usuarios
  clienteId         Int
  cliente           User @relation(fields: [clienteId],references: [id],onDelete: Cascade,onUpdate: Cascade)

  //libros
  libroId           Int
  libro             Libro @relation(fields: [libroId],references: [id],onDelete: Cascade,onUpdate: Cascade)
}

model Rol {
  id                Int @id @default(autoincrement())
  descripcion       String @db.VarChar(50)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  //user
  user              User[]
}

model InicioSesion{
  id                Int @id @default(autoincrement())
  fecha             DateTime @db.Date @default(now())
  hora              DateTime @db.Time() @default(now()) 
  //user
  userId            Int
  user              User @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
}  
model CerrarSesion{
  id                Int @id @default(autoincrement())
  fecha             DateTime @db.Date @default(now())
  hora              DateTime @db.Time() @default(now()) 
  //user
  userId            Int
  user              User @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
} 

model Libro{
  id                Int @id @default(autoincrement())
  titulo            String @db.VarChar(100)
  autor             String @db.VarChar(50)
  precio            Decimal @db.Decimal(10,2)
  edicion           String @db.VarChar(50)
  fechaLanzamiento  DateTime @db.Date
  imagen            String @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  //almacen
  almacen           Almacen? 

  //reservas
  reserva           ReservaLibros[]
  //nota de ingreso
  detalleIngreso    DetalleIngreso[]
}
//nota del ingreso
model NotaIngreso{
  id                Int @id @default(autoincrement())
  fechaIngreso      DateTime @default(now())
  proveedor         String @db.VarChar(50)

  //DetalleIngreso
  detalleIngreso    DetalleIngreso[]
}
//detalle del ingreso
model DetalleIngreso{
  //libro
  libroId           Int 
  libro             Libro @relation(fields: [libroId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  
  //nota de ingreso
  notaId            Int   
  nota              NotaIngreso @relation(fields: [notaId],references: [id],onDelete: Cascade,onUpdate: Cascade)

  cantidad          Int
  @@id([libroId,notaId])
}

model Almacen{
  id                Int @unique
  libro             Libro @relation(fields: [id],references: [id],onDelete: Cascade,onUpdate: Cascade)
  cantidad          Int @default(0)
  updatedAt         DateTime @default(now()) @updatedAt
}

